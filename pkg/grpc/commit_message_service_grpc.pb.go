// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: commit_message_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommitMessageService_GenerateCommitMessage_FullMethodName = "/commit_message.CommitMessageService/GenerateCommitMessage"
)

// CommitMessageServiceClient is the client API for CommitMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitMessageServiceClient interface {
	GenerateCommitMessage(ctx context.Context, in *CommitMessageRequest, opts ...grpc.CallOption) (*CommitMessageResponse, error)
}

type commitMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitMessageServiceClient(cc grpc.ClientConnInterface) CommitMessageServiceClient {
	return &commitMessageServiceClient{cc}
}

func (c *commitMessageServiceClient) GenerateCommitMessage(ctx context.Context, in *CommitMessageRequest, opts ...grpc.CallOption) (*CommitMessageResponse, error) {
	out := new(CommitMessageResponse)
	err := c.cc.Invoke(ctx, CommitMessageService_GenerateCommitMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitMessageServiceServer is the server API for CommitMessageService service.
// All implementations must embed UnimplementedCommitMessageServiceServer
// for forward compatibility
type CommitMessageServiceServer interface {
	GenerateCommitMessage(context.Context, *CommitMessageRequest) (*CommitMessageResponse, error)
	mustEmbedUnimplementedCommitMessageServiceServer()
}

// UnimplementedCommitMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommitMessageServiceServer struct {
}

func (UnimplementedCommitMessageServiceServer) GenerateCommitMessage(context.Context, *CommitMessageRequest) (*CommitMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCommitMessage not implemented")
}
func (UnimplementedCommitMessageServiceServer) mustEmbedUnimplementedCommitMessageServiceServer() {}

// UnsafeCommitMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitMessageServiceServer will
// result in compilation errors.
type UnsafeCommitMessageServiceServer interface {
	mustEmbedUnimplementedCommitMessageServiceServer()
}

func RegisterCommitMessageServiceServer(s grpc.ServiceRegistrar, srv CommitMessageServiceServer) {
	s.RegisterService(&CommitMessageService_ServiceDesc, srv)
}

func _CommitMessageService_GenerateCommitMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitMessageServiceServer).GenerateCommitMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitMessageService_GenerateCommitMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitMessageServiceServer).GenerateCommitMessage(ctx, req.(*CommitMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommitMessageService_ServiceDesc is the grpc.ServiceDesc for CommitMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommitMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commit_message.CommitMessageService",
	HandlerType: (*CommitMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateCommitMessage",
			Handler:    _CommitMessageService_GenerateCommitMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commit_message_service.proto",
}
