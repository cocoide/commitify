// Code generated by MockGen. DO NOT EDIT.
// Source: commit_message.go
//
// Generated by this command:
//
//	mockgen -source=commit_message.go -destination=../../mock/commit_message.go
//
// Package mock_service is a generated GoMock package.
package mock_service

import (
	"github.com/golang/mock/gomock"
	reflect "reflect"

	entity "github.com/cocoide/commitify/internal/entity"
)

// MockCommitMessageService is a mock of CommitMessageService interface.
type MockCommitMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockCommitMessageServiceMockRecorder
}

// MockCommitMessageServiceMockRecorder is the mock recorder for MockCommitMessageService.
type MockCommitMessageServiceMockRecorder struct {
	mock *MockCommitMessageService
}

// NewMockCommitMessageService creates a new mock instance.
func NewMockCommitMessageService(ctrl *gomock.Controller) *MockCommitMessageService {
	mock := &MockCommitMessageService{ctrl: ctrl}
	mock.recorder = &MockCommitMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitMessageService) EXPECT() *MockCommitMessageServiceMockRecorder {
	return m.recorder
}

// GenerateCommitMessageList mocks base method.
func (m *MockCommitMessageService) GenerateCommitMessageList(code string, config entity.Config) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCommitMessageList", code, config)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCommitMessageList indicates an expected call of GenerateCommitMessageList.
func (mr *MockCommitMessageServiceMockRecorder) GenerateCommitMessageList(code, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCommitMessageList", reflect.TypeOf((*MockCommitMessageService)(nil).GenerateCommitMessageList), code, config)
}
