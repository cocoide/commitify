// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: separate_commit_service.proto

package src

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SeparateCommitService_GenerateMultipleCommitMessage_FullMethodName = "/separate_commit.SeparateCommitService/GenerateMultipleCommitMessage"
)

// SeparateCommitServiceClient is the client API for SeparateCommitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeparateCommitServiceClient interface {
	GenerateMultipleCommitMessage(ctx context.Context, in *SeparateCommitRequest, opts ...grpc.CallOption) (*SeparateCommitResponse, error)
}

type separateCommitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeparateCommitServiceClient(cc grpc.ClientConnInterface) SeparateCommitServiceClient {
	return &separateCommitServiceClient{cc}
}

func (c *separateCommitServiceClient) GenerateMultipleCommitMessage(ctx context.Context, in *SeparateCommitRequest, opts ...grpc.CallOption) (*SeparateCommitResponse, error) {
	out := new(SeparateCommitResponse)
	err := c.cc.Invoke(ctx, SeparateCommitService_GenerateMultipleCommitMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeparateCommitServiceServer is the server API for SeparateCommitService service.
// All implementations must embed UnimplementedSeparateCommitServiceServer
// for forward compatibility
type SeparateCommitServiceServer interface {
	GenerateMultipleCommitMessage(context.Context, *SeparateCommitRequest) (*SeparateCommitResponse, error)
	mustEmbedUnimplementedSeparateCommitServiceServer()
}

// UnimplementedSeparateCommitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeparateCommitServiceServer struct {
}

func (UnimplementedSeparateCommitServiceServer) GenerateMultipleCommitMessage(context.Context, *SeparateCommitRequest) (*SeparateCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMultipleCommitMessage not implemented")
}
func (UnimplementedSeparateCommitServiceServer) mustEmbedUnimplementedSeparateCommitServiceServer() {}

// UnsafeSeparateCommitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeparateCommitServiceServer will
// result in compilation errors.
type UnsafeSeparateCommitServiceServer interface {
	mustEmbedUnimplementedSeparateCommitServiceServer()
}

func RegisterSeparateCommitServiceServer(s grpc.ServiceRegistrar, srv SeparateCommitServiceServer) {
	s.RegisterService(&SeparateCommitService_ServiceDesc, srv)
}

func _SeparateCommitService_GenerateMultipleCommitMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeparateCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeparateCommitServiceServer).GenerateMultipleCommitMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeparateCommitService_GenerateMultipleCommitMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeparateCommitServiceServer).GenerateMultipleCommitMessage(ctx, req.(*SeparateCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeparateCommitService_ServiceDesc is the grpc.ServiceDesc for SeparateCommitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeparateCommitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "separate_commit.SeparateCommitService",
	HandlerType: (*SeparateCommitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateMultipleCommitMessage",
			Handler:    _SeparateCommitService_GenerateMultipleCommitMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "separate_commit_service.proto",
}
